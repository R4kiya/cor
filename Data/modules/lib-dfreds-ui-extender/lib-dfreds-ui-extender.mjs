var __defProp2=Object.defineProperty;var __name2=(target,value)=>__defProp2(target,"name",{value,configurable:!0});var __defProp=Object.defineProperty,__name=__name2((target,value)=>__defProp(target,"name",{value,configurable:!0}),"__name");class HandlebarHelpers{static{__name2(this,"HandlebarHelpers")}static{__name(this,"HandlebarHelpers")}register(){this.#registerCompare(),this.#registerIsGm(),this.#registerStripHtml()}#registerCompare(){Handlebars.registerHelper("compare",(leftValue,operator,rightValue,options)=>{options===void 0&&(options=rightValue,rightValue=operator,operator="===");const operators={"==":__name(function(l,r){return l==r},"=="),"===":__name(function(l,r){return l===r},"==="),"!=":__name(function(l,r){return l!=r},"!="),"!==":__name(function(l,r){return l!==r},"!=="),"<":__name(function(l,r){return l<r},"<"),">":__name(function(l,r){return l>r},">"),"<=":__name(function(l,r){return l<=r},"<="),">=":__name(function(l,r){return l>=r},">="),typeof:__name(function(l,r){return typeof l==r},"typeof")};if(!operators[operator])throw new Error("Handlebars Helper 'compare' doesn't know the operator "+operator);return operators[operator](leftValue,rightValue)?options.fn(this):options.inverse(this)})}#registerIsGm(){Handlebars.registerHelper("isGm",()=>game.user.isGM)}#registerStripHtml(){Handlebars.registerHelper("stripHtml",str=>{const regExp=/<[/\w]+>/g;return new Handlebars.SafeString(str.replace(regExp,""))})}}function createHudButton(input){const type=input.hudType.capitalize();Hooks.on(`render${type}HUD`,(hud,html,data)=>{const{tooltip,action,icon,location,predicate,onClick,onRightClick,onRenderComplete}=input;if(predicate&&predicate(data)===!1)return;const button=generateButton({icon,action,tooltip});onClick&&button.on("click",event=>{onClick(event,button,data)}),onRightClick&&button.on("contextmenu",event=>{onRightClick(event,button,data)}),html.find(location).append(button),onRenderComplete&&onRenderComplete(hud,html,data)})}__name2(createHudButton,"createHudButton"),__name(createHudButton,"createHudButton");function generateButton({icon,action,tooltip}){const button=$(document.createElement("div"));return button.addClass("control-icon"),button.html(icon),button.attr("data-action",action??tooltip.toLowerCase().slugify()),button.attr("data-tooltip",tooltip),button}__name2(generateButton,"generateButton"),__name(generateButton,"generateButton");function createSceneControl(input){Hooks.on("getSceneControlButtons",controls=>{const{name,position,predicate,tool}=input;if(predicate&&predicate(controls)===!1)return;const targetControl=controls.find(control=>control.name===name);if(!targetControl)throw new Error(`Cannot find target control ${name}`);position!==void 0&&targetControl.tools.length>=position?targetControl.tools.splice(position,0,tool):targetControl.tools.push(tool)})}__name2(createSceneControl,"createSceneControl"),__name(createSceneControl,"createSceneControl");class UiExtender{static{__name2(this,"UiExtender")}static{__name(this,"UiExtender")}#sceneControls;#hudButtons;constructor(){this.#sceneControls=[],this.#hudButtons=[]}static init(){const uiExtender2=new UiExtender;window.uiExtender=uiExtender2,Hooks.callAll("uiExtender.init",uiExtender2)}static setup(){uiExtender.createSceneControls(),uiExtender.createHudButtons(),Hooks.callAll("uiExtender.setup",uiExtender)}registerSceneControl(input){if(this.#verifyModuleId(input.moduleId))this.#sceneControls.push(input);else throw new Error(`Invalid moduleId ${input.moduleId}`)}createSceneControls(){this.#sceneControls.forEach(sceneControl=>createSceneControl(sceneControl))}registerHudButton(input){if(this.#verifyModuleId(input.moduleId))this.#hudButtons.push(input);else throw new Error(`Invalid moduleId ${input.moduleId}`)}createHudButtons(){this.#hudButtons.forEach(hudButton=>createHudButton(hudButton))}#verifyModuleId(id){return!!game.modules.get(id)}}const Init={listen(){Hooks.once("init",()=>{new HandlebarHelpers().register(),UiExtender.init()})}},Setup={listen(){Hooks.once("setup",()=>{UiExtender.setup()})}},HooksUiExtender={listen(){const listeners=[Init,Setup];for(const listener of listeners)listener.listen()}};HooksUiExtender.listen();
